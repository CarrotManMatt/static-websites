name: Check, Build and Deploy All Websites

on:
    pull_request:
        branches: [main]
    push:
        branches: [main]
    schedule:
        - cron: 48 5 * * 1
    workflow_dispatch:

jobs:
    uv-check:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Check uv.lock (ensure all dependencies up to date)
              run: uv lock --check --project .build_and_deploy

    djlint:
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install djLint From Locked Dependencies
              run: uv sync --only-group lint-format --project .build_and_deploy

            - name: Run djLint
              run: uv run --project .build_and_deploy djlint . --lint --configuration .build_and_deploy/pyproject.toml  # TODO: Add GitHub workflows output format

    mypy:
        needs: [uv-check]
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install mypy From Locked Dependencies
              run: uv sync --project .build_and_deploy --no-group dev --group type-check

            - name: Save Hashed Python Version
              id: save_hashed_python_version
              run: echo "HASHED_PYTHON_VERSION=$(uv run --project .build_and_deploy python -VV |
                sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ./.mypy_cache
                key: mypy|${{steps.save_hashed_python_version.outputs.hashed_python_version}}

            - name: Run mypy
              run: uv run --project .build_and_deploy mypy .build_and_deploy  # TODO: Add GitHub workflows output format

    pre-commit:
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install pre-commit From Locked Dependencies
              run: uv sync --project .build_and_deploy --only-group pre-commit

            - name: Save Hashed Python Version
              id: save_hashed_python_version
              run: echo "hashed_python_version=$(uv run --project .build_and_deploy python -VV |
                sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ~/.cache/pre-commit
                key: pre-commit|${{steps.save_hashed_python_version.outputs.hashed_python_version}}|${{hashFiles('.pre-commit-config.yaml')}}

            - name: Setup pre-commit Environments
              run: uv run --project .build_and_deploy pre-commit install-hooks

            - name: Save pre-commit Checks Which Require Skipping
              run: echo "SKIP=check-github-workflows,ruff,ruff-format,taplo-format,taplo-lint,uv-lock,yamlfmt"
                >> $GITHUB_ENV

            - name: Run pre-commit
              run: uv run --project .build_and_deploy pre-commit run --all-files --hook-stage manual  # TODO: Add GitHub workflows output format

    ruff-lint:
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install ruff From Locked Dependencies
              run: uv sync --project .build_and_deploy --only-group lint-format

            - name: Save Hashed Python Version
              id: save_hashed_python_version
              run: echo "hashed_python_version=$(uv run --project .build_and_deploy python -VV |
                sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ./.ruff_cache
                key: ruff|${{steps.save_hashed_python_version.outputs.hashed_python_version}}

            - name: Run Ruff
              run: uv run --project .build_and_deploy ruff check --no-fix --output-format=github

    ruff-format:
        needs: [ruff-lint]
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install ruff From Locked Dependencies
              run: uv sync --project .build_and_deploy --only-group lint-format

            - name: Save Hashed Python Version
              id: save_hashed_python_version
              run: echo "hashed_python_version=$(uv run python --project .build_and_deploy -VV |
                sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

            - uses: actions/cache@v4
              with:
                path: ./.ruff_cache
                key: ruff|${{steps.save_hashed_python_version.outputs.hashed_python_version}}

            - name: Run Ruff
              run: uv run --project .build_and_deploy ruff format --check

    taplo-format:
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install Taplo From Locked Dependencies
              run: uv sync --project .build_and_deploy --only-group lint-format

            - name: Run Taplo Formatter
              run: uv run --project .build_and_deploy taplo format . --check  # TODO: Add GitHub workflows output format

    taplo-lint:
        needs: [taplo-format]
        runs-on: ubuntu-latest
        env:
            UV_NO_SYNC: true
            UV_FROZEN: true
            UV_PYTHON_DOWNLOADS: never

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Set Up Python
              uses: actions/setup-python@v5
              with:
                python-version-file: .build_and_deploy/.python-version

            - name: Install Taplo From Locked Dependencies
              run: uv sync --project .build_and_deploy --only-group lint-format

            - name: Run Taplo Linter
              run: uv run --project .build_and_deploy taplo lint . --default-schema-catalogs  # TODO: Add GitHub workflows output format

    yamlfmt:
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4

            - name: Install Golang
              uses: actions/setup-go@v5
              with:
                cache: false

            - name: Install yamlfmt
              run: go install github.com/google/yamlfmt/cmd/yamlfmt@latest

            - name: Run yamlfmt
              run: yamlfmt . -lint  # TODO: Add GitHub workflows output format

    build-and-deploy:
        name: Build and Deploy All Websites
        runs-on: ubuntu-latest
        environment: deploy
        needs: [djlint, mypy, pre-commit, ruff-lint, ruff-format, taplo-format, taplo-lint, yamlfmt,
            uv-check]
        permissions:
            contents: read

        if: github.event_name == 'push' || github.event_name == 'schedule' || github.event_name ==
            'workflow_dispatch'

        steps:
            - uses: actions/checkout@v4

            - name: Install uv
              uses: astral-sh/setup-uv@v5
              with:
                enable-cache: true
                cache-dependency-glob: .build_and_deploy/uv.lock

            - name: Install Project
              run: uv sync --project .build_and_deploy --no-group dev

            - uses: twingate/github-action@v1
              with:
                service-key: ${{secrets.TWINGATE_SERVICE_KEY}}

            - uses: webfactory/ssh-agent@v0.9.0
              with:
                ssh-private-key: ${{secrets.SSH_PRIVATE_KEY}}

            - name: Run Build & Deploy Script
              run: uv run --directory .build_and_deploy -m console --remote-directory ${{secrets.REMOTE_DIRECTORY}}
                --remote-user ${{secrets.REMOTE_USERNAME}} ${{secrets.REMOTE_IP}}
